---
name: Build Kernel Packages
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

# yamllint disable rule:line-length
# yamllint disable-line rule:truthy
on:
  push:
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force kernel build and release'
        required: true
        type: boolean
  schedule:
    - cron: '0 */6 * * *'


jobs:
  extract_params:
    name: Extract Parameters
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.verify.outputs.should_build }}
      release_tag: ${{ steps.verify.outputs.release_tag }}
    steps:
      - name: Fetch build parameters
        id: fetch
        run: |
          echo "#### Step: $GITHUB_ACTION" >> $GITHUB_STEP_SUMMARY
          git clone --depth 1 https://github.com/t2linux/T2-Ubuntu-Kernel.git
          grep '^KERNEL_VERSION=' T2-Ubuntu-Kernel/build.sh | head -n 1 > build_params
          grep '^PKGREL=' T2-Ubuntu-Kernel/build.sh | head -n 1 >> build_params

          grep '^APPLE_SMC_DRIVER_GIT_URL=' T2-Ubuntu-Kernel/patch_driver.sh | head -n 1 >> build_params
          grep '^APPLE_SMC_DRIVER_BRANCH_NAME=' T2-Ubuntu-Kernel/patch_driver.sh | head -n 1 >> build_params

          APPLE_SMC_DRIVER_COMMIT_HASH=$(grep '^APPLE_SMC_DRIVER_COMMIT_HASH=' T2-Ubuntu-Kernel/patch_driver.sh | head -n 1 | cut -d'=' -f2)
          if [ "${APPLE_SMC_DRIVER_COMMIT_HASH}" = "HEAD" ]; then
            source build_params
            git clone --single-branch --branch ${APPLE_SMC_DRIVER_BRANCH_NAME} ${APPLE_SMC_DRIVER_GIT_URL} patches
            APPLE_SMC_DRIVER_COMMIT_HASH=$(git -C patches rev-parse HEAD)
          fi
          echo APPLE_SMC_DRIVER_COMMIT_HASH=${APPLE_SMC_DRIVER_COMMIT_HASH} >> build_params

          grep '^APPLE_BCE_REPOSITORY=' T2-Ubuntu-Kernel/build.sh | head -n 1 >> build_params
          source build_params
          git clone --depth 1 "${APPLE_BCE_REPOSITORY}" apple-bce
          echo APPLE_BCE_COMMIT_HASH=$(git -C apple-bce rev-parse HEAD)  >> build_params

          git clone --depth 1 https://github.com/Redecorating/apple-gmux-t2.git
          echo APPLE_GMUX_T2_COMMIT_HASH=$(git -C apple-gmux-t2 rev-parse HEAD) >> build_params

          echo "patch_sha=$(sha256sum T2-Ubuntu-Kernel/patches/*.patch | sha256sum | cut -d' ' -f 1)" >> build_params
          echo "Build parameters: " >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat build_params >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Store build params
        uses: actions/upload-artifact@v3
        with:
          name: build-params
          path: |
            build_params
            T2-Ubuntu-Kernel/patches/*.patch

      - name: Verify if the build should be made
        id: verify
        run: |
          echo "#### Step: $GITHUB_ACTION" >> $GITHUB_STEP_SUMMARY
          curl -L --silent https://github.com/andersfugmann/T2-Debian-Kernel/releases/latest/download/build_params > prev_build_params || true

          SHOULD_BUILD=true
          if diff -q build_params prev_build_params > /dev/null; then
            SHOULD_BUILD=false
          fi

          source ./build_params
          echo "should_build=${SHOULD_BUILD}" >> $GITHUB_OUTPUT
          echo "release_tag=${KERNEL_VERSION}-${PKGREL}" >> $GITHUB_OUTPUT

          echo 'Output parameters' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat $GITHUB_OUTPUT >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  debian_kernel_config:
    name: Extract debian kernel config
    needs: extract_params
    if: needs.extract_params.outputs.should_build == 'true' || inputs.force_build
    runs-on: ubuntu-latest
    steps:
      - name: Copy Debian Kernel config
        id: copy_debian_kernel_config
        run: |
          echo "#### Step: $GITHUB_ACTION" >> $GITHUB_STEP_SUMMARY
          cat <<EOF > build.sh
          #!/bin/bash -ex
            apt -q update
            apt -q install -y linux-image-amd64
            CONFIG=\$(ls /boot/config-*-amd64 | sort | tail -n 1)
            cp -v \${CONFIG} /workspace/debian_kernel_config
          EOF

          echo "#### script:" >> $GITHUB_STEP_SUMMARY
          echo '```sh' >> $GITHUB_STEP_SUMMARY
          cat build.sh >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          chmod +x build.sh
          docker pull debian:unstable
          docker run -t -v "$(pwd):/workspace" debian:unstable /bin/bash -c /workspace/build.sh

      - name: Upload kernel config
        uses: actions/upload-artifact@v3
        with:
          name: debian-kernel-config
          path: |
            debian_kernel_config

  build:
    name: Build kernel
    needs: [extract_params, debian_kernel_config]
    runs-on: ubuntu-latest

    steps:
      - name: Get Build Parameters
        uses: actions/download-artifact@v3
        with:
          name: build-params

      - name: Setup Environment
        id: setup_environment
        run: |
          source ./build_params
          cat ./build_params >> $GITHUB_ENV
          echo "KERNEL_PATH=${GITHUB_WORKSPACE}/linux-${KERNEL_VERSION}" >> $GITHUB_ENV
          echo "### Build kernel: ${KERNEL_VERSION}" >> $GITHUB_STEP_SUMMARY

      - name: Get Kernel
        run: |
          curl --silent https://mirrors.edge.kernel.org/pub/linux/kernel/v${KERNEL_VERSION%%.*}.x/linux-${KERNEL_VERSION}.tar.xz | tar -Jx

      - name: Get repositories
        run: |
          git clone "${APPLE_BCE_REPOSITORY}" "${KERNEL_PATH}/drivers/staging/apple-bce"
          git -C "${KERNEL_PATH}/drivers/staging/apple-bce" checkout ${APPLE_BCE_COMMIT_HASH}
          git clone --single-branch --branch ${APPLE_SMC_DRIVER_BRANCH_NAME} ${APPLE_SMC_DRIVER_GIT_URL} patches
          git -C patches checkout ${APPLE_SMC_DRIVER_COMMIT_HASH}
          git clone https://github.com/Redecorating/apple-gmux-t2.git "${KERNEL_PATH}/drivers/staging/apple-gmux-t2"
          git -C "${KERNEL_PATH}/drivers/staging/apple-gmux-t2" checkout ${APPLE_GMUX_T2_COMMIT_HASH}

      - name: Patch kernel
        id: patch_kernel
        run: |
          echo "#### Step: $GITHUB_ACTION" >> $GITHUB_STEP_SUMMARY
          rm -vf patches/1001*.patch
          cp -v T2-Ubuntu-Kernel/patches/*.patch patches || true
          cd ${KERNEL_PATH}
          echo "Applying patches" >> $GITHUB_STEP_SUMMARY
          while read -r file; do
            echo " * $(basename $file)" >> $GITHUB_STEP_SUMMARY
            patch -p1 < "$file"
          done < <(find "${GITHUB_WORKSPACE}/patches" -type f -name "*.patch" | sort)

      - name: Get Debian kernel config
        uses: actions/download-artifact@v3
        with:
          name: debian-kernel-config

      - name: Update Kernel Config
        id: update_kernel_config
        run: |
          cp debian_kernel_config ${KERNEL_PATH}/.config

          cd ${KERNEL_PATH}
          ./scripts/config --module CONFIG_BT_HCIBCM4377
          ./scripts/config --module CONFIG_APPLE_BCE
          ./scripts/config --module CONFIG_HID_APPLE_IBRIDGE
          ./scripts/config --module CONFIG_HID_APPLE_TOUCHBAR
          ./scripts/config --module CONFIG_HID_APPLE_MAGIC_BACKLIGHT
          ./scripts/config --enable CONFIG_IRQ_REMAP
          ./scripts/config --module CONFIG_HID_APPLE

          # Only support intel cpu
          ./scripts/config --disable CONFIG_GENERIC_CPU
          ./scripts/config --enable CONFIG_PROCESSOR_SELECT
          ./scripts/config --enable CONFIG_MCORE2
          ./scripts/config --enable CONFIG_CPU_SUP_INTEL
          ./scripts/config --disable CONFIG_X86_AMD_PLATFORM_DEVICE
          ./scripts/config --disable CONFIG_CPU_SUP_AMD
          ./scripts/config --disable CONFIG_CPU_SUP_HYGON
          ./scripts/config --disable CONFIG_CPU_SUP_CENTAUR
          ./scripts/config --disable CONFIG_CPU_SUP_ZHAOXIN
          ./scripts/config --disable CONFIG_X86_MCE_AMD
          ./scripts/config --disable CONFIG_PERF_EVENTS_AMD_POWER
          ./scripts/config --disable CONFIG_PERF_EVENTS_AMD_UNCORE
          ./scripts/config --disable CONFIG_MICROCODE_AMD
          ./scripts/config --disable CONFIG_AMD_MEM_ENCRYPT

          cp .config ../t2_kernel_config

      - name: Upload kernel config
        uses: actions/upload-artifact@v3
        with:
          name: t2-kernel-config
          path: |
            t2_kernel_config

      - name: Free up disk space
        id: free_space
        if: false
        run: |
          echo "#### Step: $GITHUB_ACTION" >> $GITHUB_STEP_SUMMARY

          echo 'Before: ' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          df -h >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          sudo apt -q remove dotnet\* php\* python\* mono\* aspnet\* clang\* java\* ant openjdk\* -y
          sudo apt -q autoremove -y
          sudo rm -fr /usr/local/lib/android

          echo 'After: ' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          df -h >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Build Kernel
        id: build_kernel
        env:
          DOCKER_IMAGE: debian:unstable
          DEBIAN_PACKAGES: >
            build-essential debhelper
            bc rsync kmod cpio bison flex libelf-dev libssl-dev pahole
            python3-minimal

        run: |
          echo "#### Step: $GITHUB_ACTION" >> $GITHUB_STEP_SUMMARY
          cat <<EOF > build.sh
          #!/bin/bash -ex
          apt -q update
          apt -q install -y ${DEBIAN_PACKAGES}
          apt -q autoclean

          make -C /workspace/linux-${KERNEL_VERSION} olddefconfig

          make -C /workspace/linux-${KERNEL_VERSION} bindeb-pkg \
            -j $(( $(getconf _NPROCESSORS_ONLN) + 1 )) \
            LOCALVERSION=-t2 KDEB_PKGVERSION=${KERNEL_VERSION}-${PKGREL}
          EOF

          echo '```sh' >> $GITHUB_STEP_SUMMARY
          cat build.sh >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          chmod +x build.sh
          docker pull ${DOCKER_IMAGE}
          docker run -t -v "$(pwd):/workspace" ${DOCKER_IMAGE} /bin/bash -c /workspace/build.sh

      - name: Prepare Release
        run: |
          cp ${KERNEL_PATH}/.config kernel_config_${KERNEL_VERSION}
          sudo rm -fr linux-${KERNEL_VERSION}
          sudo rm -f linux-image-*-dbg_*.deb
          sha256sum *deb > sha256

      - name: Store Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build_artifacts
          path: |
            kernel_config_*
            build_params
            *.deb
            sha256

  release:
    name: Create Release
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [extract_params, build]
    steps:
      - name: Get Build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build_artifacts

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            kernel_config_*
            *.deb
            build_params
            sha256

          tag_name: v${{ needs.extract_params.outputs.release_tag }}
          draft: false
          body: >
            Installation instructions are given
            [here](https://github.com/andersfugmann/T2-Debian-Kernel#installation).
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  skip_build:
    name: Skip build
    needs: extract_params
    if: needs.extract_params.outputs.should_build == 'false' && inputs.force_build == false
    runs-on: ubuntu-latest
    steps:
      - name: Build skipped
        run: |
          echo "Skippping build - already released"
